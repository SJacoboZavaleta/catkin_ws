# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from interaccion/usuario.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import interaccion.msg

class usuario(genpy.Message):
  _md5sum = "b4360dec30567ba1372bc2e32a667a82"
  _type = "interaccion/usuario"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """inf_personal_usuario infPersonal
string emocion
pos_usuario posicion

================================================================================
MSG: interaccion/inf_personal_usuario
string nombre
int32 edad
string[] idiomas

================================================================================
MSG: interaccion/pos_usuario
int32 x
int32 y
int32 z
"""
  __slots__ = ['infPersonal','emocion','posicion']
  _slot_types = ['interaccion/inf_personal_usuario','string','interaccion/pos_usuario']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       infPersonal,emocion,posicion

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(usuario, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.infPersonal is None:
        self.infPersonal = interaccion.msg.inf_personal_usuario()
      if self.emocion is None:
        self.emocion = ''
      if self.posicion is None:
        self.posicion = interaccion.msg.pos_usuario()
    else:
      self.infPersonal = interaccion.msg.inf_personal_usuario()
      self.emocion = ''
      self.posicion = interaccion.msg.pos_usuario()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.infPersonal.nombre
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.infPersonal.edad
      buff.write(_get_struct_i().pack(_x))
      length = len(self.infPersonal.idiomas)
      buff.write(_struct_I.pack(length))
      for val1 in self.infPersonal.idiomas:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.emocion
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.posicion.x, _x.posicion.y, _x.posicion.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.infPersonal is None:
        self.infPersonal = interaccion.msg.inf_personal_usuario()
      if self.posicion is None:
        self.posicion = interaccion.msg.pos_usuario()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.infPersonal.nombre = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.infPersonal.nombre = str[start:end]
      start = end
      end += 4
      (self.infPersonal.edad,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.infPersonal.idiomas = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.infPersonal.idiomas.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.emocion = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.emocion = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.posicion.x, _x.posicion.y, _x.posicion.z,) = _get_struct_3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.infPersonal.nombre
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.infPersonal.edad
      buff.write(_get_struct_i().pack(_x))
      length = len(self.infPersonal.idiomas)
      buff.write(_struct_I.pack(length))
      for val1 in self.infPersonal.idiomas:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.emocion
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.posicion.x, _x.posicion.y, _x.posicion.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.infPersonal is None:
        self.infPersonal = interaccion.msg.inf_personal_usuario()
      if self.posicion is None:
        self.posicion = interaccion.msg.pos_usuario()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.infPersonal.nombre = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.infPersonal.nombre = str[start:end]
      start = end
      end += 4
      (self.infPersonal.edad,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.infPersonal.idiomas = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.infPersonal.idiomas.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.emocion = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.emocion = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.posicion.x, _x.posicion.y, _x.posicion.z,) = _get_struct_3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
