// Generated by gencpp from file interaccion/MultiplicadorResponse.msg
// DO NOT EDIT!


#ifndef INTERACCION_MESSAGE_MULTIPLICADORRESPONSE_H
#define INTERACCION_MESSAGE_MULTIPLICADORRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interaccion
{
template <class ContainerAllocator>
struct MultiplicadorResponse_
{
  typedef MultiplicadorResponse_<ContainerAllocator> Type;

  MultiplicadorResponse_()
    : resultado(0)  {
    }
  MultiplicadorResponse_(const ContainerAllocator& _alloc)
    : resultado(0)  {
  (void)_alloc;
    }



   typedef int64_t _resultado_type;
  _resultado_type resultado;





  typedef boost::shared_ptr< ::interaccion::MultiplicadorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interaccion::MultiplicadorResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MultiplicadorResponse_

typedef ::interaccion::MultiplicadorResponse_<std::allocator<void> > MultiplicadorResponse;

typedef boost::shared_ptr< ::interaccion::MultiplicadorResponse > MultiplicadorResponsePtr;
typedef boost::shared_ptr< ::interaccion::MultiplicadorResponse const> MultiplicadorResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interaccion::MultiplicadorResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interaccion::MultiplicadorResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::interaccion::MultiplicadorResponse_<ContainerAllocator1> & lhs, const ::interaccion::MultiplicadorResponse_<ContainerAllocator2> & rhs)
{
  return lhs.resultado == rhs.resultado;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::interaccion::MultiplicadorResponse_<ContainerAllocator1> & lhs, const ::interaccion::MultiplicadorResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace interaccion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::interaccion::MultiplicadorResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interaccion::MultiplicadorResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interaccion::MultiplicadorResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interaccion::MultiplicadorResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interaccion::MultiplicadorResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interaccion::MultiplicadorResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interaccion::MultiplicadorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1106c38e6193ae8ef172f60a94e0e0c";
  }

  static const char* value(const ::interaccion::MultiplicadorResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1106c38e6193ae8ULL;
  static const uint64_t static_value2 = 0xef172f60a94e0e0cULL;
};

template<class ContainerAllocator>
struct DataType< ::interaccion::MultiplicadorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interaccion/MultiplicadorResponse";
  }

  static const char* value(const ::interaccion::MultiplicadorResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interaccion::MultiplicadorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 resultado\n"
;
  }

  static const char* value(const ::interaccion::MultiplicadorResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interaccion::MultiplicadorResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.resultado);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiplicadorResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interaccion::MultiplicadorResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interaccion::MultiplicadorResponse_<ContainerAllocator>& v)
  {
    s << indent << "resultado: ";
    Printer<int64_t>::stream(s, indent + "  ", v.resultado);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERACCION_MESSAGE_MULTIPLICADORRESPONSE_H
